'use client';

import React, { useEffect, useMemo, useRef, useState } from 'react';

/* =========================
   Types
   ========================= */
type GeoHit = { name: string; lat: number; lon: number; class: string; type: string; };
type NakRow = { body: string; sign: string; deg: number; nakshatra: string; pada: number; lord: string; };
type DashaRow = { lord: string; startISO: string; endISO: string; };
type AspectPair = { a: string; b: string; type: string; delta: number };
type ChartOut = {
  engine: 'SWIEPH' | 'MOSEPH';
  jd_ut: number;
  lstHours: number;
  timezone: string;

  // D1
  ascendant: number;
  cusps: number[];
  positions: Record<string, number>;

  // D9
  d9Ascendant: number;
  d9Cusps: number[];
  d9Positions: Record<string, number>;

  // Extras
  sunriseISO: string | null;
  sunsetISO: string | null;
  nakTable: NakRow[];
  dasha: DashaRow[];
  aspects: AspectPair[];
};
type ApiError = { error: string; details?: any };

/* =========================
   Constants & Helpers
   ========================= */
const PRINT_LOGO_EACH_PAGE = true;

const SIGNS = [
  'Aries','Taurus','Gemini','Cancer','Leo','Virgo',
  'Libra','Scorpio','Sagittarius','Capricorn','Aquarius','Pisces'
];
const SIGN_ABBR = ['Ar','Ta','Ge','Cn','Le','Vi','Li','Sc','Sg','Cp','Aq','Pi'];

const TIMEZONES = [
  'Asia/Kolkata',
  'America/Chicago',
  'America/New_York',
  'America/Los_Angeles',
  'America/Denver',
  'UTC',
  'Europe/London',
  'Europe/Paris',
  'Europe/Berlin',
  'Asia/Dubai',
  'Asia/Singapore',
  'Asia/Tokyo',
  'Australia/Sydney'
];

function norm360(x: number){ return (((x % 360) + 360) % 360); }
function toDMSSafe(deg: number) {
  let total = Math.round(norm360(deg) * 3600);
  let d = Math.floor(total / 3600); total -= d*3600;
  let m = Math.floor(total / 60);   total -= m*60;
  let s = total;
  if (s === 60) { s = 0; m += 1; }
  if (m === 60) { m = 0; d += 1; }
  d = d % 360;
  return { d, m, s };
}
function fmtDMS(deg: number) {
  const { d, m, s } = toDMSSafe(deg);
  return `${d}° ${m}′ ${s}″`;
}
function fmtSignDeg(deg: number) {
  const d = norm360(deg);
  const sign = Math.floor(d / 30);
  const within = d - sign * 30;
  const { d: dd, m, s } = toDMSSafe(within);
  return `${SIGNS[sign]} ${dd}°${m.toString().padStart(2, '0')}′${s.toString().padStart(2, '0')}″`;
}
function fmtLST(hours: number) {
  const h = Math.floor(hours);
  const mFloat = (hours - h) * 60;
  const m = Math.floor(mFloat);
  const s = Math.round((mFloat - m) * 60);
  const pad = (n: number) => n.toString().padStart(2, '0');
  return `${pad(h)}:${pad(m)}:${pad(s)}`;
}
function fmtISO(iso: string | null, zone: string) {
  if (!iso) return '—';
  try {
    const dt = new Date(iso);
    const d = new Intl.DateTimeFormat('en-GB', { timeZone: zone, year: 'numeric', month: '2-digit', day: '2-digit' }).format(dt);
    const t = new Intl.DateTimeFormat('en-GB', { timeZone: zone, hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false }).format(dt);
    return `${d} ${t} (${zone})`;
  } catch { return '—'; }
}
const pad2 = (n: number) => n.toString().padStart(2, '0');

function range(a: number, b: number) {
  const out: number[] = [];
  for (let i=a; i<=b; i++) out.push(i);
  return out;
}
function daysInMonth(year?: number, month1based?: number) {
  if (!year || !month1based) return 31;
  return new Date(year, month1based, 0).getDate();
}

function normalizeTimezone(tzRaw: string): { tz: string | null, corrected?: string } {
  const tz = (tzRaw || '').trim();
  if (!tz) return { tz: null };
  try {
    new Intl.DateTimeFormat('en-US', { timeZone: tz });
    return { tz };
  } catch {
    if (tz.includes('/')) {
      const parts = tz.split('/');
      const candidate = `${parts[1]}/${parts[0]}`.replace(/\s+/g, '_');
      try {
        new Intl.DateTimeFormat('en-US', { timeZone: candidate });
        return { tz: candidate, corrected: candidate };
      } catch {}
    }
    const quickMap: Record<string,string> = {
      'Chicago/America': 'America/Chicago',
      'Kolkata/Asia': 'Asia/Kolkata',
      'Calcutta/Asia': 'Asia/Kolkata',
      'Bombay/Asia': 'Asia/Kolkata',
      'Madras/Asia': 'Asia/Kolkata',
    };
    if (quickMap[tz]) return { tz: quickMap[tz], corrected: quickMap[tz] };
    return { tz: null };
  }
}

/* ---- South-Indian 4×4 layout ---- */
const SOUTH_LAYOUT: Array<{sign:number,row:number,col:number}> = [
  {sign:11,row:0,col:0}, // Pisces
  {sign:0 ,row:0,col:1}, // Aries
  {sign:1 ,row:0,col:2}, // Taurus
  {sign:2 ,row:0,col:3}, // Gemini
  {sign:10,row:1,col:0}, // Aquarius
  {sign:3 ,row:1,col:3}, // Cancer
  {sign:9 ,row:2,col:0}, // Capricorn
  {sign:4 ,row:2,col:3}, // Leo
  {sign:8 ,row:3,col:0}, // Sagittarius
  {sign:7 ,row:3,col:1}, // Scorpio
  {sign:6 ,row:3,col:2}, // Libra
  {sign:5 ,row:3,col:3}, // Virgo
];

const PLANET_ABBR: Record<string,string> = {
  Sun:'Su', Moon:'Mo', Mercury:'Me', Venus:'Ve', Mars:'Ma',
  Jupiter:'Ju', Saturn:'Sa', Rahu:'Ra', Ketu:'Ke', Uranus:'Ur', Neptune:'Ne', Pluto:'Pl'
};

/* ---- Panchanga helpers ---- */
const NAK_NAMES = [
  'Ashwini','Bharani','Krittika','Rohini','Mrigashira','Ardra','Punarvasu','Pushya','Ashlesha',
  'Magha','Purva Phalguni','Uttara Phalguni','Hasta','Chitra','Swati','Vishakha','Anuradha','Jyeshtha',
  'Mula','Purva Ashadha','Uttara Ashadha','Shravana','Dhanishta','Shatabhisha','Purva Bhadrapada','Uttara Bhadrapada','Revati'
];
const LORD_SEQ = ['Ketu','Venus','Sun','Moon','Mars','Rahu','Jupiter','Saturn','Mercury'];
const DEG_PER_NAK = 360/27;
const DEG_PER_PADA = DEG_PER_NAK/4;
const TITHI_15 = ['Pratipada','Dvitiya','Tritiya','Chaturthi','Panchami','Shashthi','Saptami','Ashtami','Navami','Dashami','Ekadashi','Dwadashi','Trayodashi','Chaturdashi','Purnima'];
const TITHI_15_KRISHNA_LAST = 'Amavasya';
const YOGAS_27 = [
  'Vishkumbha','Preeti','Ayushman','Saubhagya','Shobhana','Atiganda','Sukarma','Dhriti','Shoola',
  'Ganda','Vriddhi','Dhruva','Vyaghata','Harshana','Vajra','Siddhi','Vyatipata','Variyan',
  'Parigha','Shiva','Siddha','Sadhya','Shubha','Shukla','Brahma','Indra','Vaidhriti'
];
const KARANA_ROT = ['Bava','Balava','Kaulava','Taitila','Garaja','Vanija','Vishti'];
const KARANA_END = ['Shakuni','Chatushpada','Naga'];
function jdToDate(jd_ut: number) { const ms = (jd_ut - 2440587.5) * 86400000; return new Date(ms); }
function nakForDeg(deg: number) {
  const L = norm360(deg);
  const idx = Math.floor(L / DEG_PER_NAK);
  const within = L - idx*DEG_PER_NAK;
  const pada = Math.floor(within / DEG_PER_PADA) + 1;
  const lord = LORD_SEQ[idx % 9];
  return { index: idx, name: NAK_NAMES[idx], pada, lord };
}
function panchangaFrom(out: ChartOut | null) {
  if (!out) return null;
  const sun = out.positions['Sun'];
  const moon = out.positions['Moon'];
  if (!Number.isFinite(sun) || !Number.isFinite(moon)) return null;

  const birthUTC = jdToDate(out.jd_ut);
  const vara = new Intl.DateTimeFormat('en-US', { weekday:'long', timeZone: out.timezone }).format(birthUTC);

  const diff = norm360(moon - sun);
  const tithiNum = Math.floor(diff / 12) + 1; // 1..30
  const paksha = tithiNum <= 15 ? 'Shukla' : 'Krishna';
  const idx15 = (tithiNum - 1) % 15;
  const tithiName = paksha === 'Shukla'
    ? TITHI_15[idx15]
    : (idx15 === 14 ? TITHI_15_KRISHNA_LAST : TITHI_15[idx15]);

  const nk = nakForDeg(moon);
  const yogaAngle = norm360(moon + sun);
  const yogaIdx = Math.floor(yogaAngle / DEG_PER_NAK);
  const yogaName = YOGAS_27[yogaIdx];

  const karIdx = Math.floor(diff / 6);
  let karanaName = '';
  if (karIdx === 0) karanaName = 'Kimstughna';
  else if (karIdx >= 57) karanaName = KARANA_END[karIdx - 57];
  else karanaName = KARANA_ROT[(karIdx - 1) % 7];

  return { vara, tithiNum, tithiName, paksha, nakshatra: nk.name, pada: nk.pada, yoga: yogaName, karana: karanaName };
}

/* ---- Aspects (incl. Ascendant) ---- */
const ASPECTS_DEF: Array<{name:string, angle:number, orb:number}> = [
  { name:'Conjunction', angle:0,   orb:6 },
  { name:'Opposition',  angle:180, orb:6 },
  { name:'Trine',       angle:120, orb:5 },
  { name:'Square',      angle:90,  orb:5 },
  { name:'Sextile',     angle:60,  orb:4 },
];
function angDiff(a:number,b:number) {
  const d = Math.abs(norm360(a) - norm360(b));
  return Math.min(d, 360 - d);
}
function deriveAscAspects(out: ChartOut): AspectPair[] {
  const asc = out.ascendant;
  const pairs: AspectPair[] = [];
  const names = Object.keys(out.positions);
  for (const n of names) {
    const deg = out.positions[n];
    if (!Number.isFinite(deg)) continue;
    const d = angDiff(asc, deg);
    for (const A of ASPECTS_DEF) {
      if (Math.abs(d - A.angle) <= A.orb) {
        pairs.push({ a:'Ascendant', b:n, type:A.name, delta: +(d - A.angle).toFixed(2) });
        break;
      }
    }
  }
  return pairs;
}
function mergeAspects(existing: AspectPair[], ascOnes: AspectPair[]) {
  const key = (p:AspectPair) => [p.a, p.type, p.b].join('|');
  const m = new Map<string,AspectPair>();
  for (const p of existing) m.set(key(p), p);
  for (const p of ascOnes) m.set(key(p), p);
  return Array.from(m.values());
}

/* =========================
   Page Component
   ========================= */
export default function Home() {
  /* Global & print CSS */
  useEffect(() => {
    const style = document.createElement('style');
    style.innerHTML = `
      :root { --cp-font: 16px; --cell-size: 170px; }
      body { color:#111; }
      input, select, button { font-size: var(--cp-font) !important; padding: 10px 12px !important; }
      label > div:first-child { font-size: 14px !important; }
      .card { background:#fff; border-radius:16px; box-shadow:0 2px 8px rgba(0,0,0,.06); padding:16px; }
      .avoid-break { break-inside: avoid; page-break-inside: avoid; }
      .print-only { display:none; }
      .page-section { margin-top:16px; }
      .section-title { font-size:20px; font-weight:900; margin: 6px 0 10px; }

      /* --- South-Indian chart visuals (screen) --- */
      .si-cell { border:2.2px solid #111; border-radius:12px; background:#fff; }
      .si-label { font-size:17px; font-weight:900; letter-spacing:.2px; }
      .si-chip { font-size:16px; padding:4px 10px; border:2px solid #111; border-radius:10px; font-weight:800; background:#fff; }
      .si-chip-asc { background:#fff1f2; border-color:#b91c1c; color:#b91c1c; font-weight:900; }

      /* D1 & D9 wrapper — stacked on screen and print */
      .charts-row {
        display: grid;
        grid-template-columns: 1fr;
        gap: 16px;
        margin-top: 16px;
      }

      /* Floating export toolbar (screen only) */
      .export-bar {
        position: fixed;
        right: 16px;
        bottom: 16px;
        display: flex;
        gap: 8px;
        align-items: center;
        background: rgba(255,255,255,.95);
        border: 1px solid #ddd;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0,0,0,.08);
        padding: 10px;
        z-index: 9999;
      }
      .export-bar button {
        border: 1px solid #ddd;
        background: #fff;
        padding: 8px 12px;
        border-radius: 8px;
      }

      /* Page-1 export row (screen only) */
      .export-row { display:flex; flex-wrap:wrap; gap:8px; margin-top:16px; }
      .export-row button { border:1px solid #ddd; background:#fff; padding:10px 14px; border-radius:8px; }

      @page { size: A4; margin: 12mm; }
      @media print {
        * { -webkit-print-color-adjust: exact; print-color-adjust: exact; }

        body * { visibility: hidden !important; }
        #print-root, #print-root * { visibility: visible !important; }
        #print-root { position: absolute; left: 0; top: 0; width: 100%; font-size: 14.5pt; }
        .no-print { display: none !important; }
        .print-only { display: block !important; }
        .export-bar, .export-row { display: none !important; }

        .page-section { page-break-before: always; }
        .page-section.first { page-break-before: avoid; }
        .card { box-shadow: none !important; border: 2px solid #000; }

        /* Stacked charts + slightly larger cells for print */
        .charts-row { grid-template-columns: 1fr !important; }
        :root { --cell-size: 150px; }

        .si-cell { border:3px solid #000 !important; }
        .si-label { font-size:17pt !important; font-weight:900 !important; }
        .si-chip { font-size:16pt !important; border:3px solid #000 !important; }
        .si-chip-asc { background:#ffe5e8 !important; border-color:#000 !important; color:#000 !important; }

        .charts-grid { break-inside: avoid; page-break-inside: avoid; }

        .page-logo { text-align:center; margin: 0 0 10px; }
        .page-logo img { display:block; margin:0 auto; }
      }
    `;
    document.head.appendChild(style);
    return () => document.head.removeChild(style);
  }, []);

  /* Form state (blank defaults) */
  const [name, setName] = useState('');
  const [place, setPlace] = useState('');
  const [lat, setLat] = useState<number | ''>('');
  const [lon, setLon] = useState<number | ''>('');
  const [year, setYear] = useState<number | ''>('');
  const [month, setMonth] = useState<number | ''>('');
  const [day, setDay] = useState<number | ''>('');
  const [hour12, setHour12] = useState<number | ''>('');
  const [minute, setMinute] = useState<number | ''>('');
  const [second, setSecond] = useState<number | ''>('');
  const [ampm, setAmpm] = useState<'AM'|'PM'|''>('');
  const [timezone, setTimezone] = useState('');
  const [tzSelect, setTzSelect] = useState<string>('');
  const [houseSystem, setHouseSystem] = useState('P');

  // Keep selected day valid when month/year changes
  useEffect(() => {
    if (day === '' || year === '' || month === '') return;
    const max = daysInMonth(Number(year), Number(month));
    if (Number(day) > max) setDay(max);
  }, [year, month]); // eslint-disable-line react-hooks/exhaustive-deps

  // Timezone select vs custom
  useEffect(() => {
    if (!timezone) { setTzSelect(''); return; }
    setTzSelect(TIMEZONES.includes(timezone) ? timezone : 'CUSTOM');
  }, [timezone]);

  // Geocoding & results
  const [searching, setSearching] = useState(false);
  const [hits, setHits] = useState<GeoHit[]>([]);
  const [geoError, setGeoError] = useState<string | null>(null);

  // Chart
  const [loading, setLoading] = useState(false);
  const [out, setOut] = useState<ChartOut | null>(null);
  const [err, setErr] = useState<string | ApiError | null>(null);

  const printRef = useRef<HTMLDivElement>(null);

  function resetAll() {
    setName('');
    setPlace(''); setLat(''); setLon('');
    setYear(''); setMonth(''); setDay('');
    setHour12(''); setMinute(''); setSecond(''); setAmpm('');
    setTimezone(''); setTzSelect('');
    setHouseSystem('P');
    setHits([]); setGeoError(null); setOut(null); setErr(null);
  }
  useEffect(() => { resetAll(); }, []); // start blank

  function useMyTimezone() {
    try {
      const tz = Intl.DateTimeFormat().resolvedOptions().timeZone;
      if (tz) setTimezone(tz);
    } catch {}
  }
  function useMyLocation() {
    if (typeof navigator === 'undefined' || !navigator.geolocation) {
      setGeoError('Geolocation not supported in this browser.');
      return;
    }
    setGeoError(null);
    setSearching(true);
    navigator.geolocation.getCurrentPosition(
      (pos) => {
        const { latitude, longitude } = pos.coords;
        setLat(Number(latitude.toFixed(6)));
        setLon(Number(longitude.toFixed(6)));
        setSearching(false);
      },
      (err) => {
        setSearching(false);
        setGeoError(err?.message || 'Could not read location (permission denied?).');
      },
      { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
    );
  }
  async function doGeocode() {
    setGeoError(null); setSearching(true); setHits([]);
    try {
      if (!place.trim()) throw new Error('Type a city/place first.');
      const res = await fetch(`/api/geocode?q=${encodeURIComponent(place)}`, { cache: 'no-store' });
      const json = await res.json();
      if (!res.ok) throw new Error(json?.error || 'Geocode failed');
      const list: GeoHit[] = json?.results || [];
      setHits(list);
      if (json?.top) {
        setPlace(json.top.name);
        setLat(Number(json.top.lat.toFixed(6)));
        setLon(Number(json.top.lon.toFixed(6)));
      }
    } catch (e: any) {
      setGeoError(e?.message || String(e));
    } finally {
      setSearching(false);
    }
  }
  // Auto-geocode if place typed & coords empty (gentle)
  useEffect(() => {
    const should = place.trim() && (lat === '' || lon === '');
    if (!should) return;
    const id = window.setTimeout(() => {
      (async () => {
        try {
          const res = await fetch(`/api/geocode?q=${encodeURIComponent(place)}`, { cache: 'no-store' });
          const json = await res.json();
          if (res.ok && json?.top) {
            setPlace(json.top.name);
            setLat(Number(json.top.lat.toFixed(6)));
            setLon(Number(json.top.lon.toFixed(6)));
            setHits(json.results || []);
          }
        } catch {}
      })();
    }, 600);
    return () => window.clearTimeout(id);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [place]);

  const yearOptions = useMemo(() => range(1800, 2100), []);
  const dateStr = useMemo(() => {
    if (!year || !month || !day) return '';
    return `${year}-${pad2(Number(month))}-${pad2(Number(day))}`;
  }, [year, month, day]);
  const timeStr = useMemo(() => {
    if (hour12 === '' || minute === '' || second === '' || ampm === '') return '';
    let h = Number(hour12);
    if (ampm === 'AM') h = (h === 12 ? 0 : h);
    if (ampm === 'PM') h = (h === 12 ? 12 : h + 12);
    return `${pad2(h)}:${pad2(Number(minute))}:${pad2(Number(second))}`;
  }, [hour12, minute, second, ampm]);

  async function generateChart(e?: React.FormEvent) {
    e?.preventDefault();
    setErr(null); setOut(null); setLoading(true);
    try {
      if (!name.trim()) { setErr({ error: 'Please enter a Name.' }); return; }
      if (!place.trim()) { setErr({ error: 'Please enter a Place (e.g., Park Ridge, Illinois, USA).' }); return; }
      if (lat === '' || lon === '') { setErr({ error: 'Please provide latitude and longitude (use Geocode, Use my location, or type them).' }); return; }
      if (!dateStr) { setErr({ error: 'Please set Day/Month/Year using the dropdowns.' }); return; }
      if (!timeStr) { setErr({ error: 'Please set Time (HH:MM:SS & AM/PM) using the dropdowns.' }); return; }

      const { tz, corrected } = normalizeTimezone(timezone);
      if (!tz) { setErr({ error: 'Unrecognized timezone. Choose from the list or type a valid IANA zone like "America/Chicago", "Asia/Kolkata".' }); return; }
      if (corrected && corrected !== timezone) setTimezone(corrected);

      const res = await fetch('/api/chart', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ date: dateStr, time: timeStr, timezone: tz, lat: Number(lat), lon: Number(lon), houseSystem })
      });
      let json: any = null;
      try { json = await res.json(); } catch {}
      if (!res.ok) { setErr(json && json.error ? json as ApiError : { error: 'Chart error' }); return; }
      setErr(null);
      setOut(json as ChartOut);
    } catch (e: any) {
      setErr({ error: e?.message || String(e) });
    } finally {
      setLoading(false);
    }
  }

  const panchanga = useMemo(() => panchangaFrom(out), [out]);

  const filteredHits = useMemo(() => {
    const preferred = hits.filter(h =>
      (h.class === 'place' && ['city','town','village','hamlet','suburb','neighbourhood','municipality','county'].includes(h.type)) ||
      (h.class === 'boundary' && ['administrative'].includes(h.type))
    );
    return preferred.length ? preferred : hits;
  }, [hits]);

  /* ---- South-Indian Chart component ---- */
  function SouthIndianChart({
    title, mode, ascDeg,
    positions,
  }: {
    title: string;
    mode: 'sign' | 'bhava';
    ascDeg?: number;
    positions: Record<string, number>;
  }) {
    const boxes = Array.from({length:12}).map((_,i)=>({
      sign: i,
      signAbbr: SIGN_ABBR[i],
      label: '',
      planets: [] as string[],
    }));
    const ascSign = Math.floor(norm360(ascDeg ?? 0)/30);

    if (mode === 'sign') {
      boxes.forEach(b => b.label = b.signAbbr);
      Object.entries(positions).forEach(([name, deg])=>{
        const s = Math.floor(norm360(deg)/30);
        boxes[s].planets.push(PLANET_ABBR[name] ?? name);
      });
      if (typeof ascDeg === 'number' && Number.isFinite(ascDeg)) {
        const sAsc = Math.floor(norm360(ascDeg)/30);
        boxes[sAsc].planets.unshift('ASC');
      }
    } else {
      boxes.forEach(b => {
        const h = ((b.sign - ascSign + 12) % 12) + 1;
        b.label = `H${h}`;
      });
      Object.entries(positions).forEach(([name, deg])=>{
        const s = Math.floor(norm360(deg)/30);
        const house = ((s - ascSign + 12) % 12) + 1;
        const idx = boxes.findIndex(bb => bb.label === `H${house}`);
        if (idx >= 0) boxes[idx].planets.push(PLANET_ABBR[name] ?? name);
      });
    }

    const grid: Array<Array<null | typeof boxes[number]>> = Array.from({length:4}).map(()=>Array(4).fill(null));
    SOUTH_LAYOUT.forEach(({sign,row,col}) => { grid[row][col] = boxes[sign]; });

    return (
      <div className="card avoid-break">
        <div style={{fontWeight:800, marginBottom:10, fontSize:18}}>{title}</div>
        <div className="charts-grid"
             style={{
               display:'grid',
               gridTemplateColumns:'repeat(4, var(--cell-size))',
               gridTemplateRows:'repeat(4, var(--cell-size))',
               gap:10,
               justifyContent:'center'
             }}>
          {grid.map((row, r) => row.map((cell, c) => (
            <div key={`${r}-${c}`} className="si-cell" style={{
              padding:12,
              display:'flex', flexDirection:'column', justifyContent:'space-between', background:'#fff'
            }}>
              {cell ? (
                <>
                  <div style={{display:'flex', justifyContent:'space-between', alignItems:'center'}}>
                    <span className="si-label">{cell.label}</span>
                  </div>
                  <div style={{display:'flex', flexWrap:'wrap', gap:8, alignItems:'center', minHeight:38}}>
                    {cell.planets.length === 0
                      ? <span className="si-label" style={{fontWeight:600, opacity:.9}}>—</span>
                      : cell.planets.map((p, i)=>(
                          <span
                            key={i}
                            className={`si-chip ${p === 'ASC' ? 'si-chip-asc' : ''}`}
                          >
                            {p}
                          </span>
                        ))
                    }
                  </div>
                </>
              ) : null}
            </div>
          )))}
        </div>
      </div>
    );
  }

  /* -------- Exports -------- */
  function downloadText(filename: string, mime: string, text: string) {
    const blob = new Blob([text], { type: mime });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = filename;
    document.body.appendChild(a); a.click(); a.remove();
    setTimeout(()=>URL.revokeObjectURL(url), 1000);
  }
  function downloadJSON() {
    if (!out) return;
    const payload = { meta: { name, place, lat, lon, date: dateStr, time: timeStr, timezone, houseSystem }, result: out };
    downloadText('chart.json', 'application/json;charset=utf-8', JSON.stringify(payload, null, 2));
  }
  function downloadCSV() {
    if (!out) return;
    const d1Names = ['Ascendant','Sun','Moon','Mercury','Venus','Mars','Jupiter','Saturn','Rahu','Ketu','Uranus','Neptune','Pluto'];
    const d1Rows = d1Names.map(n => {
      const deg = n === 'Ascendant' ? out.ascendant : out.positions[n];
      if (deg === undefined) return null;
      return [n, fmtSignDeg(deg), fmtDMS(deg)].join(',');
    }).filter(Boolean).join('\n');
    downloadText('longitudes_d1.csv', 'text/csv;charset=utf-8', 'Body,SignLongitude,DMS\n' + d1Rows);
    const d9Rows = d1Names.map(n => {
      const deg = n === 'Ascendant' ? out.d9Ascendant : out.d9Positions[n];
      if (deg === undefined) return null;
      return [n, fmtSignDeg(deg), fmtDMS(deg)].join(',');
    }).filter(Boolean).join('\n');
    downloadText('longitudes_d9.csv', 'text/csv;charset=utf-8', 'Body,SignLongitude,DMS\n' + d9Rows);
    const nakRows = out.nakTable.map(r => [r.body, r.sign, fmtSignDeg(r.deg), r.nakshatra, r.pada, r.lord].join(',')).join('\n');
    downloadText('nakshatra.csv', 'text/csv;charset=utf-8', 'Body,Sign,Longitude,Nakshatra,Pada,Ruler\n' + nakRows);
    const dashaRows = out.dasha.map(d => [d.lord, d.startISO, d.endISO].join(',')).join('\n');
    downloadText('vimshottari_dasha.csv', 'text/csv;charset=utf-8', 'Lord,StartISO,EndISO\n' + dashaRows);
  }
  function svgForSouthChart(title: string, mode: 'sign'|'bhava', ascDeg: number, positions: Record<string, number>) {
    const boxes = Array.from({length:12}).map((_,i)=>({ sign: i, label: '', planets: [] as string[] }));
    const ascSign = Math.floor(norm360(ascDeg)/30);
    if (mode === 'sign') {
      boxes.forEach(b => b.label = SIGN_ABBR[b.sign]);
      Object.entries(positions).forEach(([name, deg])=>{
        const s = Math.floor(norm360(deg)/30);
        boxes[s].planets.push(PLANET_ABBR[name] ?? name);
      });
      const sAsc = Math.floor(norm360(ascDeg)/30);
      boxes[sAsc].planets.unshift('ASC');
    } else {
      boxes.forEach(b => { const h = ((b.sign - ascSign + 12) % 12) + 1; b.label = `H${h}`; });
      Object.entries(positions).forEach(([name, deg])=>{
        const s = Math.floor(norm360(deg)/30);
        const house = ((s - ascSign + 12) % 12) + 1;
        const idx = boxes.findIndex(bb => bb.label === `H${house}`);
        if (idx >= 0) boxes[idx].planets.push(PLANET_ABBR[name] ?? name);
      });
    }
    const cell = 170, gap = 12, pad = 24;
    const width = pad*2 + gap*3 + cell*4;
    const height = pad*2 + gap*3 + cell*4;

    const rects: string[] = [];
    const labels: string[] = [];
    const texts: string[] = [];

    const tempCells: Record<string, {label:string; planets:string[]}> = {};
    SOUTH_LAYOUT.forEach(({sign}) => { tempCells[`${sign}`] = { label:'', planets:[] }; });
    SOUTH_LAYOUT.forEach(({sign}) => {
      const b = boxes[sign];
      tempCells[`${sign}`] = { label: b.label, planets: b.planets };
    });
    for (let r=0;r<4;r++){
      for (let c=0;c<4;c++){
        const sign = SOUTH_LAYOUT[r*4+c].sign;
        const cellData = tempCells[`${sign}`];
        const x = pad + c*(cell+gap);
        const y = pad + r*(cell+gap);
        rects.push(`<rect x="${x}" y="${y}" width="${cell}" height="${cell}" rx="12" ry="12" fill="#fff" stroke="#000" stroke-width="3"/>`);
        labels.push(`<text x="${x+10}" y="${y+26}" font-family="system-ui, -apple-system, Segoe UI, Roboto" font-size="18" font-weight="700" fill="#000">${cellData.label}</text>`);
        const line = cellData.planets.length ? cellData.planets.join(' ') : '—';
        texts.push(`<text x="${x+10}" y="${y+56}" font-family="system-ui, -apple-system, Segoe UI, Roboto" font-size="18" fill="#000">${line}</text>`);
      }
    }

    const titleText = `<text x="${width/2}" y="20" text-anchor="middle" font-family="system-ui, -apple-system, Segoe UI, Roboto" font-size="20" font-weight="700">${title}</text>`;

    return `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height+30}" viewBox="0 0 ${width} ${height+30}" xmlns="http://www.w3.org/2000/svg">
  <rect x="0" y="0" width="${width}" height="${height+30}" fill="#ffffff"/>
  ${titleText}
  ${rects.join('\n')}
  ${labels.join('\n')}
  ${texts.join('\n')}
</svg>`;
  }
  async function svgToPngAndDownload(svgText: string, filename: string) {
    const svgUrl = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svgText);
    const img = new Image();
    const done = new Promise<void>((resolve, reject) => { img.onload = () => resolve(); img.onerror = (e) => reject(e); });
    img.src = svgUrl;
    await done;
    const canvas = document.createElement('canvas');
    canvas.width = img.width; canvas.height = img.height;
    const ctx = canvas.getContext('2d')!;
    ctx.drawImage(img, 0, 0);
    canvas.toBlob((blob) => {
      if (!blob) return;
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url; a.download = filename;
      document.body.appendChild(a); a.click(); a.remove();
      setTimeout(()=>URL.revokeObjectURL(url), 1000);
    }, 'image/png');
  }
  async function exportChartsSVG() {
    if (!out) return;
    const d1svg = svgForSouthChart(`Rāśi (D1) — Signs${name ? ` • ${name}` : ''}`, 'sign', out.ascendant, out.positions);
    const d9svg = svgForSouthChart(`Navāṁśa (D9) — Signs${name ? ` • ${name}` : ''}`, 'sign', out.d9Ascendant, out.d9Positions);
    const bhsvg = svgForSouthChart(`Bhāva (Houses from Lagna)${name ? ` • ${name}` : ''}`, 'bhava', out.ascendant, out.positions);
    downloadText('chart_d1.svg', 'image/svg+xml;charset=utf-8', d1svg);
    downloadText('chart_d9.svg', 'image/svg+xml;charset=utf-8', d9svg);
    downloadText('chart_bhava.svg', 'image/svg+xml;charset=utf-8', bhsvg);
  }
  async function exportChartsPNG() {
    if (!out) return;
    const d1svg = svgForSouthChart(`Rāśi (D1) — Signs${name ? ` • ${name}` : ''}`, 'sign', out.ascendant, out.positions);
    const d9svg = svgForSouthChart(`Navāṁśa (D9) — Signs${name ? ` • ${name}` : ''}`, 'sign', out.d9Ascendant, out.d9Positions);
    const bhsvg = svgForSouthChart(`Bhāva (Houses from Lagna)${name ? ` • ${name}` : ''}`, 'bhava', out.ascendant, out.positions);
    await svgToPngAndDownload(d1svg, 'chart_d1.png');
    await svgToPngAndDownload(d9svg, 'chart_d9.png');
    await svgToPngAndDownload(bhsvg, 'chart_bhava.png');
  }
  function downloadHTML() {
    const root = document.getElementById('print-root');
    if (!root) return;
    const styles = Array.from(document.querySelectorAll('style'))
      .map(s => s.innerHTML)
      .join('\n');

    const html = `
<!doctype html>
<html>
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Vedic Astrology Report${name ? ' - ' + name : ''}</title>
<style>${styles}</style>
</head>
<body>
<div id="print-root">${root.innerHTML}</div>
</body>
</html>`.trim();

    const blob = new Blob([html], { type: 'text/html;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = `report${name ? '_' + name.replace(/\s+/g,'_') : ''}.html`;
    document.body.appendChild(a); a.click(); a.remove();
    setTimeout(()=>URL.revokeObjectURL(url), 1000);
  }

  // NEW: real “Save PDF” (no print dialog)
  async function downloadPDF() {
    try {
      const [{ jsPDF }, html2canvasModule] = await Promise.all([
        import('jspdf'),
        import('html2canvas'),
      ]);
      const html2canvas: any = (html2canvasModule as any).default || html2canvasModule;

      const root = document.getElementById('print-root');
      if (!root) { alert('Report section not found.'); return; }

      // Temporarily force print styles for better capture
      const prev = document.body.getAttribute('data-force-print') || '';
      document.body.setAttribute('data-force-print','1');

      const canvas = await html2canvas(root, {
        scale: 2,
        useCORS: true,
        backgroundColor: '#ffffff',
        windowWidth: root.scrollWidth,
        windowHeight: root.scrollHeight,
      });

      if (!prev) document.body.removeAttribute('data-force-print');

      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF({ orientation: 'p', unit: 'mm', format: 'a4', compress: true });

      const pageW = pdf.internal.pageSize.getWidth();
      const pageH = pdf.internal.pageSize.getHeight();
      const imgW  = pageW;
      const imgH  = (canvas.height * imgW) / canvas.width;

      pdf.addImage(imgData, 'PNG', 0, 0, imgW, imgH);

      let heightLeft = imgH - pageH;
      let y = -pageH;
      while (heightLeft > 0) {
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, y, imgW, imgH);
        heightLeft -= pageH;
        y -= pageH;
      }

      const fname = (name.trim() ? name.trim().replace(/\s+/g,'_') : 'vedic-report');
      pdf.save(`${fname}.pdf`);
    } catch (err) {
      console.error(err);
      alert('Sorry — could not generate PDF. You can still use Print → Save as PDF.');
    }
  }

  /* =========================
     UI
     ========================= */
  return (
    <main style={{minHeight:'100vh', background:'#f7f7f8', fontSize:16, lineHeight:1.6}}>
      {/* Top header with centered logo (screen) */}
      <header style={{position:'sticky', top:0, background:'rgba(255,255,255,.9)', backdropFilter:'blur(6px)', borderBottom:'1px solid #eee'}}>
        <div style={{
          maxWidth:1100, margin:'0 auto', padding:'16px',
          display:'flex', flexDirection:'column', alignItems:'center', justifyContent:'center', textAlign:'center'
        }}>
          <img
            src="/logo.png"
            alt="Chandra Prabha — Vedic Astrology"
            width={260}
            height={260}
            style={{display:'block', margin:'0 auto'}}
            onError={(e)=>{(e.target as HTMLImageElement).style.display='none';}}
          />
          <div style={{fontSize:14, color:'#6b7280', marginTop:6}}>
            Vedic Astrology Report
          </div>
        </div>
      </header>

      <div style={{maxWidth:1100, margin:'0 auto', padding:'24px 16px'}}>
        {/* Form */}
        <form onSubmit={generateChart} className="card avoid-break" style={{display:'grid', gap:12}}>
          <div style={{display:'grid', gridTemplateColumns:'1fr', gap:8}}>
            <label>
              <div>Name</div>
              <input
                value={name}
                onChange={e=>setName(e.target.value)}
                placeholder="Person's name (e.g., Durga)"
                style={{border:'1px solid #ddd', padding:'8px 10px', borderRadius:8, width:'100%'}}
              />
            </label>
          </div>

          <div style={{display:'grid', gridTemplateColumns:'1fr auto auto auto auto', gap:8}}>
            <label>
              <div>Place</div>
              <input value={place} onChange={e=>setPlace(e.target.value)} placeholder="City, State/Province, Country (e.g., Park Ridge, Illinois, USA)"
                     style={{border:'1px solid #ddd', padding:'8px 10px', borderRadius:8, width:'100%'}} />
            </label>
            <button type="button" disabled={searching} onClick={doGeocode}
                    style={{background:'#000', color:'#fff', border:'none', padding:'8px 12px', borderRadius:8}}>
              {searching ? 'Searching…' : 'Geocode'}
            </button>
            <button type="button" onClick={useMyLocation}
                    style={{border:'1px solid #ddd', background:'#fff', padding:'8px 12px', borderRadius:8}}>
              Use my location
            </button>
            <button type="button" onClick={useMyTimezone}
                    style={{border:'1px solid #ddd', background:'#fff', padding:'8px 12px', borderRadius:8}}>
              Use my timezone
            </button>
            <button type="button" onClick={resetAll}
                    style={{border:'1px solid #ddd', background:'#fff', padding:'8px 12px', borderRadius:8}}>
              Reset
            </button>
          </div>

          <div style={{display:'grid', gridTemplateColumns:'repeat(5, 1fr)', gap:8}}>
            <label>
              <div>Latitude</div>
              <input type="number" step="0.000001" value={lat}
                     onChange={e=>setLat(e.target.value===''? '' : Number(e.target.value))}
                     placeholder="e.g., 42.011233" style={{border:'1px solid #ddd', padding:'8px 10px', borderRadius:8, width:'100%'}} />
            </label>
            <label>
              <div>Longitude</div>
              <input type="number" step="0.000001" value={lon}
                     onChange={e=>setLon(e.target.value===''? '' : Number(e.target.value))}
                     placeholder="e.g., -87.840603" style={{border:'1px solid #ddd', padding:'8px 10px', borderRadius:8, width:'100%'}} />
              <div style={{fontSize:12, color:'#6b7280', marginTop:4}}>
                Tip: You can type coordinates manually. Verify at{' '}
                <a href="https://www.latlong.net/" target="_blank" rel="noreferrer">latlong.net</a>.
              </div>
            </label>

            {/* Date (DD/MM/YYYY) */}
            <div>
              <div>Date (DD/MM/YYYY)</div>
              <div style={{display:'flex', alignItems:'center', gap:6}}>
                <select
                  value={day === '' ? '' : Number(day)}
                  onChange={e=>setDay(e.target.value===''? '' : Number(e.target.value))}
                  style={{border:'1px solid #ddd', padding:'8px 10px', borderRadius:8}}
                >
                  <option value="">DD</option>
                  {range(1, daysInMonth(typeof year==='number'?year:undefined, typeof month==='number'?month:undefined)).map(d => <option key={d} value={d}>{pad2(d)}</option>)}
                </select>
                <span>/</span>
                <select
                  value={month === '' ? '' : Number(month)}
                  onChange={e=>{ setMonth(e.target.value===''? '' : Number(e.target.value)); }}
                  style={{border:'1px solid #ddd', padding:'8px 10px', borderRadius:8}}
                >
                  <option value="">MM</option>
                  {range(1,12).map(m => <option key={m} value={m}>{pad2(m)}</option>)}
                </select>
                <span>/</span>
                <select
                  value={year === '' ? '' : Number(year)}
                  onChange={e=>{ setYear(e.target.value===''? '' : Number(e.target.value)); }}
                  style={{border:'1px solid #ddd', padding:'8px 10px', borderRadius:8}}
                >
                  <option value="">YYYY</option>
                  {yearOptions.map(y => <option key={y} value={y}>{y}</option>)}
                </select>
              </div>
            </div>

            {/* Time (HH:MM:SS + AM/PM) */}
            <div>
              <div>Time (HH:MM:SS)</div>
              <div style={{display:'flex', alignItems:'center', gap:6}}>
                <select
                  value={hour12 === '' ? '' : Number(hour12)}
                  onChange={e=>setHour12(e.target.value===''? '' : Number(e.target.value))}
                  style={{border:'1px solid #ddd', padding:'8px 10px', borderRadius:8}}
                >
                  <option value="">HH</option>
                  {range(1,12).map(h => <option key={h} value={h}>{pad2(h)}</option>)}
                </select>
                <span>:</span>
                <select
                  value={minute === '' ? '' : Number(minute)}
                  onChange={e=>setMinute(e.target.value===''? '' : Number(e.target.value))}
                  style={{border:'1px solid #ddd', padding:'8px 10px', borderRadius:8}}
                >
                  <option value="">MM</option>
                  {range(0,59).map(m => <option key={m} value={m}>{pad2(m)}</option>)}
                </select>
                <span>:</span>
                <select
                  value={second === '' ? '' : Number(second)}
                  onChange={e=>setSecond(e.target.value===''? '' : Number(e.target.value))}
                  style={{border:'1px solid #ddd', padding:'8px 10px', borderRadius:8}}
                >
                  <option value="">SS</option>
                  {range(0,59).map(s => <option key={s} value={s}>{pad2(s)}</option>)}
                </select>
                <select
                  value={ampm}
                  onChange={e=>setAmpm((e.target.value || '') as 'AM'|'PM'|'')}
                  style={{border:'1px solid #ddd', padding:'8px 10px', borderRadius:8}}
                >
                  <option value="">AM/PM</option>
                  <option value="AM">AM</option>
                  <option value="PM">PM</option>
                </select>
              </div>
            </div>

            {/* Timezone */}
            <label>
              <div>Timezone</div>
              <select
                value={tzSelect}
                onChange={(e) => {
                  const v = e.target.value;
                  setTzSelect(v);
                  if (v !== 'CUSTOM') setTimezone(v);
                }}
                style={{border:'1px solid #ddd', padding:'8px 10px', borderRadius:8, width:'100%'}}
              >
                <option value="">Select timezone…</option>
                {TIMEZONES.map(tz => <option key={tz} value={tz}>{tz}</option>)}
                <option value="CUSTOM">Custom (type below)</option>
              </select>
              {tzSelect === 'CUSTOM' && (
                <input
                  value={timezone}
                  onChange={e=>setTimezone(e.target.value)}
                  placeholder="e.g., America/Chicago"
                  style={{border:'1px solid #ddd', padding:'8px 10px', borderRadius:8, width:'100%', marginTop:6}}
                />
              )}
            </label>
          </div>

          <div style={{display:'grid', gridTemplateColumns:'1fr auto', gap:8, alignItems:'end'}}>
            <label>
              <div>House System</div>
              <select value={houseSystem} onChange={e=>setHouseSystem(e.target.value)}
                      style={{border:'1px solid #ddd', padding:'8px 10px', borderRadius:8, width:'100%'}}>
                <option value="P">Placidus (P)</option>
                <option value="W">Whole Sign (W)</option>
                <option value="K">Koch (K)</option>
                <option value="C">Campanus (C)</option>
                <option value="E">Equal (E)</option>
              </select>
            </label>

            <button type="submit" disabled={loading}
                    style={{background:'#000', color:'#fff', border:'none', padding:'10px 14px', borderRadius:8, width:'100%'}}>
              {loading ? 'Calculating…' : 'Generate Chart'}
            </button>
          </div>

          {geoError && <div style={{color:'#b91c1c'}}>{geoError}</div>}
          {err && (
            <div style={{color:'#b91c1c', background:'#fff', border:'1px solid #fca5a5', padding:12, borderRadius:8}}>
              <div style={{fontWeight:700, marginBottom:6}}>
                {typeof err === 'string' ? err : err.error}
              </div>
              {typeof err === 'object' && (err as ApiError).details && (
                <details style={{fontSize:14}}>
                  <summary>Show technical details</summary>
                  <pre style={{whiteSpace:'pre-wrap'}}>{JSON.stringify((err as ApiError).details, null, 2)}</pre>
                </details>
              )}
            </div>
          )}
        </form>

        {/* Geocode results */}
        {filteredHits.length > 0 && (
          <div className="card avoid-break" style={{marginTop:16}}>
            <div style={{fontWeight:700, marginBottom:8}}>Geocode results (city/town first)</div>
            <ul style={{display:'grid', gap:6}}>
              {filteredHits.map((h, i) => (
                <li key={i} style={{display:'flex', justifyContent:'space-between', gap:8, alignItems:'center'}}>
                  <span>{h.name}</span>
                  <button
                    onClick={() => { setPlace(h.name); setLat(Number(h.lat.toFixed(6))); setLon(Number(h.lon.toFixed(6))); }}
                    style={{border:'1px solid #ddd', padding:'6px 12px', borderRadius:8, background:'#fff'}}
                  >
                    Use
                  </button>
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* =========================
            REPORT
            ========================= */}
        {out && (
          <div id="print-root" ref={printRef}>
           {/* Print-only logo/header at the top of the printed report */}
         <style>{`
         @media print {
         #print-logo-block { display:block !important; }
  }
     }</style>
        <div id="print-logo-block" style={{display:'none', textAlign:'center', marginBottom:8}}>
        <img src="/logo.png" width={140} height={140} alt="Chandra Prabha — Vedic Astrology" />
       <div style={{fontWeight:900, fontSize:18, marginTop:6}}>Vedic Astrology Report</div>
</div>
 




            {/* ---------- PAGE 1 ---------- */}
            <section className="page-section first">
              {PRINT_LOGO_EACH_PAGE && (
                <div className="print-only page-logo">
                  <img src="/logo.png" width={160} height={160} alt="Chandra Prabha — Vedic Astrology"/>
                  <div style={{fontSize:18, fontWeight:900, marginTop:6}}>Vedic Astrology Report</div>
                </div>
              )}

              {/* Intro block */}
              <div className="card avoid-break" style={{textAlign:'center'}}>
                <div style={{fontSize:22, fontWeight:900}}>Vedic Astrology Report</div>
                <div style={{marginTop:8, fontSize:16, display:'grid', gridTemplateColumns:'repeat(5, 1fr)', gap:8}}>
                  <div><b>Name:</b> {name || '—'}</div>
                  <div><b>Birth Place:</b> {place || '—'}</div>
                  <div><b>Date of Birth:</b> {dateStr || '—'}</div>
                  <div><b>Time of Birth:</b> {timeStr || '—'}</div>
                  <div><b>Timezone:</b> {timezone || '—'}</div>
                </div>
              </div>

              {/* Summary */}
              <div className="card avoid-break" style={{marginTop:16}}>
                <div className="section-title">Summary</div>
                <div style={{display:'grid', gridTemplateColumns:'repeat(3, 1fr)', gap:8}}>
                  <div><b>Engine:</b> {out.engine}</div>
                  <div><b>JD (UT):</b> {out.jd_ut.toFixed(6)}</div>
                  <div><b>LST:</b> {fmtLST(out.lstHours)}</div>
                  <div><b>D1 Lagna:</b> {fmtSignDeg(out.ascendant)} ({fmtDMS(out.ascendant)})</div>
                  <div><b>D9 Lagna:</b> {fmtSignDeg(out.d9Ascendant)} ({fmtDMS(out.d9Ascendant)})</div>
                  <div><b>Sunrise:</b> {fmtISO(out.sunriseISO, out.timezone)}</div>
                  <div><b>Sunset:</b> {fmtISO(out.sunsetISO, out.timezone)}</div>
                </div>
              </div>

              {/* Panchanga */}
              {panchanga && (
                <div className="card avoid-break" style={{marginTop:16}}>
                  <div className="section-title">Pañchāṅga</div>
                  <div style={{display:'grid', gridTemplateColumns:'1fr 1fr 1fr 1fr 1fr', gap:8}}>
                    <div><b>Vara</b><div>{panchanga.vara}</div></div>
                    <div><b>Tithi</b><div>{panchanga.paksha} {panchanga.tithiName} (#{panchanga.tithiNum})</div></div>
                    <div><b>Nakshatra</b><div>{panchanga.nakshatra}</div></div>
                    <div><b>Pada</b><div>{panchanga.pada}</div></div>
                    <div><b>Yoga</b><div>{panchanga.yoga}</div></div>
                  </div>
                  <div style={{display:'grid', gridTemplateColumns:'1fr', gap:8, marginTop:8}}>
                    <div><b>Karana</b><div>{panchanga.karana}</div></div>
                  </div>
                </div>
              )}

              {/* D1 & D9 (stacked) */}
              <div className="charts-row">
                <SouthIndianChart title="Rāśi (D1) — Signs" mode="sign" ascDeg={out.ascendant}    positions={out.positions} />
                <SouthIndianChart title="Navāṁśa (D9) — Signs" mode="sign" ascDeg={out.d9Ascendant} positions={out.d9Positions} />
              </div>

              {/* Screen-only export row under the charts */}
              <div className="export-row">
                <button onClick={() => window.print()} title="Save as PDF via browser print">Print</button>
                <button onClick={downloadPDF} title="Create a PDF directly (no print dialog)">Save PDF</button>
                <button onClick={downloadHTML}>Save HTML</button>
                <button onClick={downloadJSON}>Download JSON</button>
                <button onClick={downloadCSV}>Download CSV</button>
                <button onClick={exportChartsSVG}>Charts (SVG)</button>
                <button onClick={exportChartsPNG}>Charts (PNG)</button>
              </div>
            </section>

            {/* ---------- PAGE 2 ---------- */}
            <section className="page-section">
              {PRINT_LOGO_EACH_PAGE && (
                <div className="print-only page-logo">
                  <img src="/logo.png" width={120} height={120} alt="Chandra Prabha — Vedic Astrology"/>
                </div>
              )}

              <SouthIndianChart title="Bhāva (Houses from Lagna)" mode="bhava" ascDeg={out.ascendant} positions={out.positions} />

              <div style={{display:'grid', gridTemplateColumns:'1fr 1fr', gap:16, marginTop:16}}>
                <div className="card avoid-break">
                  <div className="section-title">Rāśi (D1) — Planet Longitudes (sidereal)</div>
                  <div style={{display:'grid', gridTemplateColumns:'1fr 1fr', gap:6}}>
                    {['Ascendant','Sun','Moon','Mercury','Venus','Mars','Jupiter','Saturn','Rahu','Ketu','Uranus','Neptune','Pluto']
                      .map((nameP) => {
                        const deg = nameP === 'Ascendant' ? out.ascendant : out.positions[nameP];
                        if (deg === undefined) return null;
                        return <div key={nameP}><b>{nameP}:</b> {fmtSignDeg(deg)} ({fmtDMS(deg)})</div>;
                      })}
                  </div>
                </div>
                <div className="card avoid-break">
                  <div className="section-title">Navāṁśa (D9) — Planet Longitudes</div>
                  <div style={{display:'grid', gridTemplateColumns:'1fr 1fr', gap:6}}>
                    {['Ascendant','Sun','Moon','Mercury','Venus','Mars','Jupiter','Saturn','Rahu','Ketu','Uranus','Neptune','Pluto']
                      .map((nameP) => {
                        const deg = nameP === 'Ascendant' ? out.d9Ascendant : out.d9Positions[nameP];
                        if (deg === undefined) return null;
                        return <div key={nameP}><b>{nameP}:</b> {fmtSignDeg(deg)} ({fmtDMS(deg)})</div>;
                      })}
                  </div>
                </div>
              </div>
            </section>

            {/* ---------- PAGE 3 ---------- */}
            <section className="page-section">
              {PRINT_LOGO_EACH_PAGE && (
                <div className="print-only page-logo">
                  <img src="/logo.png" width={120} height={120} alt="Chandra Prabha — Vedic Astrology"/>
                </div>
              )}

              <div className="card avoid-break">
                <div className="section-title">Nakshatra • Pada • Ruler (D1)</div>
                <div style={{display:'grid', gridTemplateColumns:'repeat(6, 1fr)', gap:8}}>
                  <div style={{fontWeight:900}}>Body</div>
                  <div style={{fontWeight:900}}>Sign</div>
                  <div style={{fontWeight:900}}>Longitude</div>
                  <div style={{fontWeight:900}}>Nakshatra</div>
                  <div style={{fontWeight:900}}>Pada</div>
                  <div style={{fontWeight:900}}>Ruler</div>
                  {out.nakTable.map((r, i)=>(
                    <React.Fragment key={`nak-${i}`}>
                      <div>{r.body}</div>
                      <div>{r.sign}</div>
                      <div>{fmtSignDeg(r.deg)}</div>
                      <div>{r.nakshatra}</div>
                      <div>{r.pada}</div>
                      <div>{r.lord}</div>
                    </React.Fragment>
                  ))}
                </div>
              </div>

              <div className="card avoid-break" style={{marginTop:16}}>
                <div className="section-title">Vimśottarī Mahādaśā (from birth)</div>
                <div style={{display:'grid', gridTemplateColumns:'1fr 1fr 1fr', gap:8}}>
                  <div style={{fontWeight:900}}>Lord</div>
                  <div style={{fontWeight:900}}>Start</div>
                  <div style={{fontWeight:900}}>End</div>
                  {out.dasha.map((d, i)=>(
                    <React.Fragment key={`dasha-${i}`}>
                      <div>{d.lord}</div>
                      <div>{fmtISO(d.startISO, out.timezone)}</div>
                      <div>{fmtISO(d.endISO, out.timezone)}</div>
                    </React.Fragment>
                  ))}
                </div>
              </div>
            </section>

            {/* ---------- PAGE 4 ---------- */}
            <section className="page-section">
              {PRINT_LOGO_EACH_PAGE && (
                <div className="print-only page-logo">
                  <img src="/logo.png" width={120} height={120} alt="Chandra Prabha — Vedic Astrology"/>
                </div>
              )}

              <div className="card avoid-break">
                <div className="section-title">Aspects (Major)</div>
                <div style={{display:'grid', gridTemplateColumns:'1fr 1fr 1fr 1fr', gap:8}}>
                  <div style={{fontWeight:900}}>Planet A</div>
                  <div style={{fontWeight:900}}>Aspect</div>
                  <div style={{fontWeight:900}}>Planet B</div>
                  <div style={{fontWeight:900}}>Δ°</div>
                  {mergeAspects(out.aspects || [], deriveAscAspects(out)).length === 0 && (<><div>—</div><div>—</div><div>—</div><div>—</div></>)}
                  {mergeAspects(out.aspects || [], deriveAscAspects(out)).map((p, i)=>(
                    <React.Fragment key={`asp-${i}`}>
                      <div>{p.a}</div>
                      <div>{p.type}</div>
                      <div>{p.b}</div>
                      <div>{p.delta.toFixed(2)}</div>
                    </React.Fragment>
                  ))}
                </div>
                <div style={{fontSize:14, color:'#6b7280', marginTop:6}}>
                  Aspects include Ascendant↔planet; ecliptic longitudes with typical orbs (6° conj/opp, 5° tri/sq, 4° sex).
                </div>
              </div>
            </section>
          </div>
        )}
      </div>

      {/* Floating export toolbar (screen only, appears after a chart is generated) */}
      {out && (
        <div className="export-bar">
          <button onClick={() => window.print()} title="Save as PDF via browser print">Print</button>
          <button onClick={downloadPDF} title="Create a PDF directly (no print dialog)">Save PDF</button>
          <button onClick={downloadHTML}>Save HTML</button>
          <button onClick={downloadJSON}>Download JSON</button>
          <button onClick={downloadCSV}>Download CSV</button>
          <button onClick={exportChartsSVG}>Charts (SVG)</button>
          <button onClick={exportChartsPNG}>Charts (PNG)</button>
        </div>
      )}
    </main>
  );
}

         


